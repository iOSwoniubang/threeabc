   //
//  AppDelegate.m
//  BaiMi
//
//  Created by licl on 16/6/23.
//  Copyright © 2016年 licl. All rights reserved.
//

#import "AppDelegate.h"
#import "HXLoginViewController.h"
#import "HXNavigationController.h"
#import "HXGuideViewController.h"
#import "AFNetworkReachabilityManager.h"
#import "HXArticleTypeDao.h"
#import "HXAdditonServiceDao.h"
#import "UMSocial.h"
#import "UMSocialQQHandler.h"
#import "UMSocialWechatHandler.h"
#import <AMapFoundationKit/AMapFoundationKit.h>
#import <AudioToolbox/AudioToolbox.h>

#import <AlipaySDK/AlipaySDK.h>
#import "WXApi.h"
#import "GeTuiSdk.h"
#import "HXPayHelper.h"
#import "HXNoticeView.h"

@interface AppDelegate ()<UIScrollViewDelegate,WXApiDelegate,GeTuiSdkDelegate>
@property(assign,nonatomic)BOOL firstNetWork;
@property(assign,nonatomic)BOOL firstClient;
@end

@implementation AppDelegate

-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
    [self.window endEditing:YES];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    self.window=[[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    self.window.backgroundColor = [UIColor whiteColor];
    
    [[UINavigationBar appearance] setBarTintColor:LightBlueColor];
    [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];
    [[UINavigationBar appearance] setTitleTextAttributes:@{NSFontAttributeName:[UIFont boldSystemFontOfSize:20.0],NSForegroundColorAttributeName:[UIColor whiteColor]}];
    
    [[UIBarButtonItem appearance] setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:17.0],NSForegroundColorAttributeName:[UIColor whiteColor]} forState:UIControlStateNormal];
    [self.window makeKeyAndVisible];
    
    application.applicationIconBadgeNumber = 0;        // 标签
    
#pragma mark---个推sdk注册
    [GeTuiSdk startSdkWithAppId:GETUI_AppId appKey:GETUI_AppKey appSecret:GETUI_AppSecret delegate:self];
    [GeTuiSdk runBackgroundEnable:YES];
    // 注册APNS
    [self registerUserNotification];
    
#pragma mark--友盟sdk注册
    [UMSocialData setAppKey:UM_Appkey];
    [UMSocialData openLog:YES];
    [UMSocialQQHandler setQQWithAppId:UM_QQ_AppId appKey:UM_QQ_AppKey url:@"http://www.umeng.com/social"];
    //设置支持没有客户端情况下使用SSO授权
    [UMSocialQQHandler setSupportWebView:YES];
    [UMSocialWechatHandler setWXAppId:UM_WeChat_AppId appSecret:UM_WeChat_AppSecret url:@"http://www.umeng.com/social"];
    //由于苹果审核政策需求，未安装客户端平台进行隐藏
    [UMSocialConfig hiddenNotInstallPlatforms:@[UMShareToQQ, UMShareToQzone,UMShareToWechatSession,UMShareToWechatTimeline]];
    
    [WXApi registerApp:UM_WeChat_AppId withDescription:@"com.bm.express"];
    [AMapServices sharedServices].apiKey=GD_Map_Key;
    [[AMapServices sharedServices] setEnableHTTPS:YES];

    //启动网络监听
    [self networkReachiableDeal];
    
    BOOL isFirstRunInThisVersion = [NSUserDefaultsUtil isFirstRunInThisVersion];
    if(isFirstRunInThisVersion){
        HXGuideViewController*desVC=[[HXGuideViewController alloc] init];
        self.window.rootViewController=desVC;
    }else
        [self showImitateVC];

    return YES;
}


- (void)applicationWillResignActive:(UIApplication *)application {
    NSLog(@"applicationWillResignActive");
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    NSLog(@"applicationDidEnterBackground");
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    NSLog(@"applicationWillEnterForeground");
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    NSLog(@"applicationDidBecomeActive");
}

- (void)applicationWillTerminate:(UIApplication *)application {
    [self saveContext];
}

// 支持所有iOS系统
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    return [self appOpenUrl:url];
}

//- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
////       return  [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];
//    NSLog(@"%@",url);
//      return [WXApi handleOpenURL:url delegate:self];
//}
//
//
//// NOTE: 9.0以后使用新API接口
//- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString*, id> *)options
//{
//    NSLog(@"%@",url);
//    return [self appOpenUrl:url];
//}



-(BOOL)appOpenUrl:(NSURL*)url{
    BOOL result=[UMSocialSnsService handleOpenURL:url];
    if (result==false) {
        //如果极简开发包不可用，会跳转支付宝钱包进行支付，需要将支付宝钱包的支付结果回传给开发包
        if ([url.host isEqualToString:@"safepay"] | [url.host isEqualToString:@"alipay"]) {
            [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
                //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】
                NSLog(@"result = %@",resultDic);
                [self alipayCallBackDealByResultDict:resultDic];
            }];
        }
        else  if ([url.host isEqualToString:@"platformapi"]){//支付宝钱包快登授权返回authCode
            
            [[AlipaySDK defaultService] processAuthResult:url standbyCallback:^(NSDictionary *resultDic) {
                //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】
                NSLog(@"result = %@",resultDic);
                [self alipayCallBackDealByResultDict:resultDic];
            }];
        }else{
            [WXApi handleOpenURL:url delegate:self];
        }
        return YES;
    }
    return result;
}

-(void)alipayCallBackDealByResultDict:(NSDictionary*)resultDic{
    int resultStatus=[[resultDic objectForKey:@"resultStatus"] intValue];
    HXPayResult*payResult=[HXPayResult new];
    if (resultStatus==AlipayStatusCancel || resultStatus==AlipayStatusURLError ) {
        payResult.errCode=1;
        payResult.errStr=[resultDic objectForKey:@"memo"];
        [[HXPayHelper sharePayHelper] payCallBackResult:payResult];
    }
}

//微信支付sdk回调
-(void)onResp:(BaseResp *)resp{
    if ([resp isKindOfClass:[PayResp class]]) {
//         [[NSNotificationCenter defaultCenter] postNotificationName:HXWxPayRequest object:resp];
         PayResp*res=(PayResp*)resp;
        [[HXPayHelper sharePayHelper] weixinSdkPayResp:res];
    }
}


#pragma mark---个推

/** 注册APNS */
- (void)registerUserNotification{
      if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 8.0) {
        UIUserNotificationType types = (UIUserNotificationTypeAlert|UIUserNotificationTypeSound|UIUserNotificationTypeBadge);
        UIUserNotificationSettings *settings= [UIUserNotificationSettings settingsForTypes:types categories:nil];
        [[UIApplication sharedApplication] registerForRemoteNotifications];
        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];
      }else{
    UIRemoteNotificationType apn_type = (UIRemoteNotificationType)(UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeSound |UIRemoteNotificationTypeBadge);
    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:apn_type];
}
}


/** 远程通知注册成功委托 */
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    NSString *token = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"<>"]];
    token = [token stringByReplacingOccurrencesOfString:@" " withString:@""];
    NSLog(@"\n>>>[DeviceToken Success]:%@\n\n", token);
    
    //向个推服务器注册deviceToken
    [GeTuiSdk registerDeviceToken:token];
}

- (void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    /// Background Fetch 恢复SDK 运行
    [GeTuiSdk resume];
    completionHandler(UIBackgroundFetchResultNewData);
}

/** SDK启动成功返回cid */
- (void)GeTuiSdkDidRegisterClient:(NSString *)clientId {
    //个推SDK已注册，返回clientId
    NSLog(@"\n>>>[GeTuiSdk RegisterClient]:%@\n\n", clientId);
    
    [NSUserDefaultsUtil setGeTuiClientId:clientId];
    
    if(![NSUserDefaultsUtil isFirstRunInThisVersion] && !_firstClient){
        [self loginDeal];
        _firstClient=YES;
    }
}

/** SDK遇到错误回调 */
- (void)GeTuiSdkDidOccurError:(NSError *)error {
    //个推错误报告，集成步骤发生的任何错误都在这里通知，如果集成后，无法正常收到消息，查看这里的通知。
    NSLog(@"\n>>>[GexinSdk error]:%@\n\n", [error localizedDescription]);
}

/** APP已经接收到“远程”通知(推送) - 透传推送消息  */
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {
    // 处理APNs代码，通过userInfo可以取到推送的信息（包括内容，角标，自定义参数等）。如果需要弹窗等其他操作，则需要自行编码。
    NSLog(@"\n>>>[Receive RemoteNotification - Background Fetch]:%@\n\n",userInfo);
    completionHandler(UIBackgroundFetchResultNewData);
}

/** SDK收到透传消息回调 */
- (void)GeTuiSdkDidReceivePayloadData:(NSData *)payloadData andTaskId:(NSString *)taskId andMsgId:(NSString *)msgId andOffLine:(BOOL)offLine fromGtAppId:(NSString *)appId {
    //收到个推消息
    HXLoginUser*user=[NSUserDefaultsUtil getLoginUser];
    if (!user)
        return;
    
    NSString *payloadMsg = nil;
    if (payloadData) {
         AudioServicesPlaySystemSound(1007);
        payloadMsg = [[NSString alloc] initWithBytes:payloadData.bytes
                                              length:payloadData.length
                                            encoding:NSUTF8StringEncoding];
        NSLog(@"payloadMsg:%@",payloadMsg);
        NSDictionary*msgDic=[HXNSStringUtil getJsonArrayOrJsonDicFormJsonStr:payloadMsg];
        [self dealPayloadMsgDic:msgDic];
    }
    
//    NSString *msg = [NSString stringWithFormat:@"taskId=%@,messageId:%@,payloadMsg:%@%@",taskId,msgId, payloadMsg,offLine ? @"<离线消息>" : @""];
//    NSLog(@"\n>>>[GexinSdk ReceivePayload]:%@\n\n", msg);
//    [GeTuiSdk sendFeedbackMessage:90001 taskId:taskId msgId:msgId];
}

#pragma mark--个推推送消息处理
-(void)dealPayloadMsgDic:(NSDictionary*)payloadMsgDic{
    int messageType=[[payloadMsgDic objectForKey:@"messageType"] intValue];
    NSDictionary*contentDic=[payloadMsgDic objectForKey:@"content"];
    switch (messageType) {
        case 1:{
             //支付结果通知，返回content{no:支付编号，result:支付结果(0,失败，1成功)}
            [[HXPayHelper sharePayHelper] payResultNotification:contentDic];
        };break;
        case 2:{
            //取件任务通知(取件任务被人接了以后发送的通知)，返回content{orderNo:订单编号，nickName:接任务人昵称}
            NSString*msgStr=@"您的师哥任务已经被领取，请注意接收。";
            [self showNoticeView:msgStr];

            [[NSNotificationCenter defaultCenter] postNotificationName:HXNTFTaskAcceptedNotice object:contentDic];
        };break;
        case 3:{
            //包裹通知(包裹上架/入柜发送的通知)，返回content{expressNumber:快递单号，expressName:快递公司，pointName:网点名称，cabineType:放置类型(1网柜，2货架),cabineName:网柜/货架名称}
            NSString*msgStr=[NSString stringWithFormat:@"您的包裹已经在%@网点，请及时领取。",[contentDic objectForKey:@"pointName"]];
            [self showNoticeView:msgStr];

            [[NSNotificationCenter defaultCenter] postNotificationName:HXNTFNewRecieveOrderNotice object:contentDic];
        };break;
        case 4:{
            //退款通知(content: {orderNo:订单号,amount:退款金额 })
            NSString*msgStr=[NSString stringWithFormat:@"您收到洗衣退款%.2f元",[[contentDic objectForKey:@"amount"] floatValue]];
            [self showNoticeView:msgStr];
            //刷新余额
            [self updateBalanceHttp];
        };break;
        default:
            break;
    }
}

-(void)showNoticeView:(NSString*)msgStr{
    HXNoticeView *view = [[HXNoticeView alloc] initWithFrame:CGRectMake(0, -80, SCREEN_WIDTH, 80)];
    view.title = @"通知";
    view.content =msgStr;
    [view ViewTipShow];

}

//退款后刷新余额
-(void)updateBalanceHttp{
    HXLoginUser*user=[NSUserDefaultsUtil getLoginUser];
    NSString*sKey=[HXNSStringUtil getSkeyByParamInfo:@[user.phoneNumber,user.token]];
    
    [HXHttpUtils requestJsonPostWithUrlStr:@"/user/payment/balance/getBalance" params:@{@"phoneNumber":user.phoneNumber,@"sKey":sKey} onComplete:^(NSError *error, NSDictionary *resultJson) {
        if (error) {
            NSLog(@"余额更新失败");
        }else{
            
            NSDictionary*content=[resultJson objectForKey:@"content"];
            user.balance=[[content objectForKey:@"balance"] floatValue];
            [NSUserDefaultsUtil setLoginUser:user];
        }
    }];
}



//登录处理
-(void)loginDeal{
    HXLoginUser*user=[NSUserDefaultsUtil getLoginUser];
    if (user){
        //自动登录
        [self autoLogin:user];
    }else{
         //手动登录
        [self showLoginVC];
    }
}

//自动登录
-(void)autoLogin:(HXLoginUser*)user{
    NSString*clientId=[NSUserDefaultsUtil geTuiClientId];
    NSString*sKey=[HXNSStringUtil getSkeyByParamInfo:@[user.phoneNumber,clientId,user.securityCode,[NSNumber numberWithInt:HXOsTypeIos],user.token]];
    [HXHttpUtils requestJsonPostWithUrlStr:@"/user/doLogin" params:@{@"phoneNumber":user.phoneNumber,@"sKey":sKey,@"securityCode":user.securityCode,@"isAutoLogin":@"1",@"cid":clientId,@"osType":[NSNumber numberWithInt:HXOsTypeIos]} onComplete:^(NSError *error, NSDictionary *resultJson) {
        if (error) {
            
            [NSUserDefaultsUtil removeUser];
            [self showLoginVC];
            return;
        }else{
            NSDictionary*dict=[resultJson objectForKey:@"content"];
            user.realName=[HXHttpUtils whetherNil:[dict objectForKey:@"name"]];
            user.nickName=[HXHttpUtils whetherNil:[dict objectForKey:@"nickName"]];
            user.logoUrl=[HXHttpUtils whetherNil:[dict objectForKey:@"icon"]];
            user.collegeNo=[HXHttpUtils whetherNil:[dict objectForKey:@"collegeNo"]];
            user.collegeName=[HXHttpUtils whetherNil:[dict objectForKey:@"collegeName"]];
            user.adress=[HXHttpUtils whetherNil:[dict objectForKey:@"adress"]];
            user.pointNo=[HXHttpUtils whetherNil:[dict objectForKey:@"pointNo"]];
            user.pointName=[HXHttpUtils whetherNil:[dict objectForKey:@"pointName"]];
            user.dormitoryHouseNo=[HXHttpUtils whetherNil:[dict objectForKey:@"dormitoryHouseNo"]];
            user.dormitoryDes=[HXHttpUtils whetherNil:[dict objectForKey:@"dormitoryHouseName"]];
            user.dormitoryNo=[HXHttpUtils whetherNil:[dict objectForKey:@"dormitoryNo"]];
            user.balance =[[HXHttpUtils whetherNil:[dict objectForKey:@"balance"] ]floatValue];
            user.praiseCount=[[HXHttpUtils whetherNil:[dict objectForKey:@"praiseCount"]] longLongValue];
            user.despiseCount=[[HXHttpUtils whetherNil:[dict objectForKey:@"despiseCount"]] longLongValue];
            user.verifyStatus=[[HXHttpUtils whetherNil:[dict objectForKey:@"verificationStatus"] ] intValue];
            user.studentVerificationStatus=[[HXHttpUtils whetherNil:[dict objectForKey:@"studentVerificationStatus"] ] intValue];
            user.inviteCode=[HXHttpUtils whetherNil:[dict objectForKey:@"inviteCode"]];
            user.refererCode=[HXHttpUtils whetherNil:[dict objectForKey:@"refererCode"]];
            user.idCardUrl=[HXHttpUtils whetherNil:[dict objectForKey:@"idCard"]];
            user.studentId=[HXHttpUtils whetherNil:[dict objectForKey:@"studentNo"]];
            user.integral=[[HXHttpUtils whetherNil:[dict objectForKey:@"integral"]] longLongValue];
            user.frozenAmount=[[HXHttpUtils whetherNil:[dict objectForKey:@"frozenAmount"]] floatValue];
            id defaultAddress=[dict objectForKey:@"defaultAddress"];
            if (![defaultAddress isKindOfClass:[NSNull class]]) {
                NSDictionary*defaultAddressDic=defaultAddress;
                user.defaultAddressJsonStr=[HXNSStringUtil getJsonStringFromDicOrArray:defaultAddressDic];
            }else
                user.defaultAddressJsonStr=@"";
            [NSUserDefaultsUtil setLoginUser:user];
            [NSUserDefaultsUtil setLastUserPhone:user.phoneNumber];
            self.tabBarVC=[[HXMainTabBarController alloc] init];
            self.window.rootViewController=self.tabBarVC;
        }
    }];

}

-(void)showLoginVC{
    //手动登录
    HXLoginViewController*loginVC=[[HXLoginViewController alloc] init];
    self.window.rootViewController=loginVC;
}

//模拟启动页
-(void)showImitateVC{
    UIViewController*imitateVC=[[UIViewController alloc] init];
    UIImageView*imageView=[[UIImageView alloc] initWithFrame:[UIScreen mainScreen].bounds];
    NSString*name=[self fetchLunchImageName];
    UIImage * launchImage =[UIImage imageNamed:name];
    imageView.image=launchImage;
    [imitateVC.view addSubview:imageView];
    self.window.rootViewController=imitateVC;
}


- (NSString *)fetchLunchImageName
{
    CGSize winSize = [UIScreen mainScreen].bounds.size;
    NSArray* imagesDict = [[[NSBundle mainBundle] infoDictionary] valueForKey:@"UILaunchImages"];
    for (NSDictionary* dict in imagesDict) {
        if(CGSizeEqualToSize(CGSizeFromString(dict[@"UILaunchImageSize"]),winSize))
            return dict[@"UILaunchImageName"];
    }
    return nil;
}


//网络监测
-(void)networkReachiableDeal{
    AFNetworkReachabilityManager *netWorkManager = [AFNetworkReachabilityManager sharedManager];
    [netWorkManager startMonitoring];  //开启网络监视器；
    
    [netWorkManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        NSLog(@"网络监测");
#pragma mark--根据当前网络处理显示页面
        if (!_firstNetWork) {
            if (netWorkManager.isReachable==NO)
             [self showLoginVC];
            _firstNetWork=YES;
        }

#pragma mark--网络恢复时
        if (status==AFNetworkReachabilityStatusReachableViaWWAN |status== AFNetworkReachabilityStatusReachableViaWiFi) {
            //广告条
            BOOL hasBannderList=[NSUserDefaultsUtil isHasBannerList];
            if (!hasBannderList)
                [[NSNotificationCenter defaultCenter] postNotificationName:HXNTFNetWorkBannerRefresh object:nil];
            //后台配置信息
            NSArray*articleTypes=[[HXArticleTypeDao new] fetchAllArticles];
//            NSArray*additions=[[HXAdditonServiceDao new] fetchAllAdditions];
//            if ((!articleTypes.count) || (! additions.count))
            if (!articleTypes.count)
                [[NSNotificationCenter defaultCenter] postNotificationName:HXNTFSystemParamsHttpRefresh object:nil];
        }
    } ];
}


+ (AppDelegate*)appDelegate{
    return (AppDelegate*)[[UIApplication sharedApplication] delegate];
}


#pragma mark 强制退出
-(void)loginOut{
    [UIApplication sharedApplication].applicationIconBadgeNumber = 0;
    
    self.tabBarVC.selectedIndex = 0;
    HXNavigationController*nav=[self.tabBarVC.viewControllers objectAtIndex:0];
    nav.navigationBarHidden=NO;
    [nav popToRootViewControllerAnimated:YES];
    HXLoginViewController*loginVC=[[HXLoginViewController alloc] init];
    [UIApplication sharedApplication].keyWindow.rootViewController=loginVC;
    
    UIAlertView*alert=[[UIAlertView alloc] initWithTitle:@"提示" message:@"该账号已在其他终端登录，自动下线，如非本人操作，请注意账号安全！" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil,nil];
    [alert show];
}



#pragma mark - Core Data stack

@synthesize managedObjectContext = _managedObjectContext;
@synthesize managedObjectModel = _managedObjectModel;
@synthesize persistentStoreCoordinator = _persistentStoreCoordinator;

- (NSURL *)applicationDocumentsDirectory {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "com.walrushz.BaiMi" in the application's documents directory.
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

- (NSManagedObjectModel *)managedObjectModel {
    // The managed object model for the application. It is a fatal error for the application not to be able to find and load its model.
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"BaiMi" withExtension:@"momd"];
    _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return _managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
    // The persistent store coordinator for the application. This implementation creates and returns a coordinator, having added the store for the application to it.
    if (_persistentStoreCoordinator != nil) {
        return _persistentStoreCoordinator;
    }
    
    // Create the coordinator and store
    
    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"BaiMi.sqlite"];
    NSError *error = nil;
    NSString *failureReason = @"There was an error creating or loading the application's saved data.";
    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error]) {
        // Report any error we got.
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        dict[NSLocalizedDescriptionKey] = @"Failed to initialize the application's saved data";
        dict[NSLocalizedFailureReasonErrorKey] = failureReason;
        dict[NSUnderlyingErrorKey] = error;
        error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];
        // Replace this with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
    
    return _persistentStoreCoordinator;
}


- (NSManagedObjectContext *)managedObjectContext {
    // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
    
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (!coordinator) {
        return nil;
    }
    _managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
    [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    return _managedObjectContext;
}

#pragma mark - Core Data Saving support

- (void)saveContext {
    NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
    if (managedObjectContext != nil) {
        NSError *error = nil;
        if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {
            // Replace this implementation with code to handle the error appropriately.
            // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }
}

@end
